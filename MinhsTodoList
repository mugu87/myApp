>>>Todo
- Add field to User form so it can choose between fitbit or mobile. Also, remove the default @user.device_type = "fitbit". Once this done, fix the show method of user controller so that it chooses appropriately which device to get update from
- save mobile data to user stat
- User Model: define only three types in user_type field: exerciser, benefit_admin, manager,
- User Model: define two types of gender: male and female
- Company Model: email format validation
- NPO Model: email format validation
- Identity Model: finetune omniauth to take more fields at registration. see https://github.com/intridea/omniauth-identity
- All Model: validation
- (optional) try to change user's weight, height, etc.... from benefit apps
- Fix application controller so that it doesnt create just the crescent classic event
- Functions from Stat_Helper:
self.get_steps_count_walking (miles_walking)
self.get_steps_count_running (miles_running)
self.get_cal_burned_walking (miles_walking)
self.get_cal_burned_running (miles_running)
- User Model: email format validation (Maybe done in devise?)
- Fix the JS error: Carrousel is not a a function
- add line dependent: destroy to all models relations
- restrict challenge type in model challenges to either 'individual' or 'group'

>>> Security
- validation for Cause model (see the website for paperclip)
- XSS attack prevention for Cause model
- Secure after sign in path
- Make sure only a certain user have a certain views. Eg: only the manager see everyone else

>>>In progress
- enforce git branching strategy
- create challenge scheme
  |-> make relationships
  |-> create challenge_id in cause  -- done
  |-> create mechanism to keep track of completed challenges and paid
  	|-> add completed_challenges_count to challenges model
	|-> determine when a challege is completed or not: can add unattribute to table challeged_joined or create a funciton in chall		enge model

>>>Done
- All Models:  relationship supports
- Set up user page to retrieve info from FitBit, such as height, weight, etc.
- associate users with causes 
- associate causes with an event
- add to device_type to user
- remove the field device_type from stat
- save fitbit data to user stat
   |-> make module to do fitness computaion
- update user's data from fitbit
- Shorten down the decimal places in the stat's kio_running, kilo_walking, etc...

